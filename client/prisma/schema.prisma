// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

enum Role {
  CUSTOMER
  ADMIN
  WORKER
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
}

model Supplier {
  id       String    @id @default(cuid())
  name     String    @unique
  logo     String?
  products Product[]
}

model Distributor {
  id       String    @id @default(cuid())
  name     String    @unique
  logo     String?
  products Product[]
}

model Settlement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  orders      Order[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  icon     String?
  image    String?
  products Product[]
}

model Product {
  id                 String      @id @default(cuid())
  name               String
  description        String?
  price              Float
  image              String?
  available          Boolean     @default(true)
  discountPercentage Int         @default(0)
  unit               String      @default("عدد")
  stock              Int         @default(0)
  categoryId         String
  category           Category    @relation(fields: [categoryId], references: [id])
  supplierId         String
  supplier           Supplier    @relation(fields: [supplierId], references: [id])
  distributorId      String
  distributor        Distributor @relation(fields: [distributorId], references: [id])

  @@unique([name, supplierId])
}

model Order {
  id           String      @id @default(cuid())
  totalPrice   Float
  createdAt    DateTime    @default(now())
  deliveryDate DateTime
  status       OrderStatus @default(PENDING)
  notes        String?
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  settlementId String
  settlement   Settlement  @relation(fields: [settlementId], references: [id])
  items        OrderItem[]
  returnRequest ReturnRequest?
}

model OrderItem {
  id                 String              @id @default(cuid())
  productName        String
  quantity           Int
  price              Float
  orderId            String
  order              Order               @relation(fields: [orderId], references: [id])
  returnRequestItems ReturnRequestItem[]
}

model User {
  id          String   @id @default(cuid())
  phone       String   @unique
  password    String
  createdAt   DateTime @default(now())
  name        String?
  shopName    String?
  shopAddress String?
  landline    String?
  latitude    Float?
  longitude   Float?
  role        Role     @default(CUSTOMER)
  orders      Order[]
}

model ReturnRequest {
  id        String              @id @default(cuid())
  createdAt DateTime            @default(now())
  status    ReturnStatus        @default(REQUESTED)
  reason    String?
  orderId   String              @unique
  order     Order               @relation(fields: [orderId], references: [id])
  items     ReturnRequestItem[]
}

model ReturnRequestItem {
  id              String        @id @default(cuid())
  quantity        Int
  orderItemId     String
  orderItem       OrderItem     @relation(fields: [orderItemId], references: [id])
  returnRequestId String
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id])
}